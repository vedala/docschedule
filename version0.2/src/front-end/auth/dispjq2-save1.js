// Get today's date, then extract today's day-of-week.// Based on today's day-of-week, calculate date of// most recent Sunday prior to today. This is required// since schedule is displayed Sunday thru Saturday for// each week.var dateObj = new Date();var dayOfWeek = dateObj.getDay();if (dayOfWeek != 0) {	dateObj.setDate(dateObj.getDate() - dayOfWeek);}var startDate = dateObj.toISOString().substr(0, 10);dateObj.setDate(dateObj.getDate() + 6);var endDate = dateObj.toISOString().substr(0, 10);dateObj.setDate(dateObj.getDate() + 1);var startDate2 = dateObj.toISOString().substr(0, 10);dateObj.setDate(dateObj.getDate() + 6);var endDate2 = dateObj.toISOString().substr(0, 10);dateObj.setDate(dateObj.getDate() + 1);var startDate3 = dateObj.toISOString().substr(0, 10);dateObj.setDate(dateObj.getDate() + 6);var endDate3 = dateObj.toISOString().substr(0, 10);var startDates = [];var endDates = [];populateStartEndDates(startDates, endDates, dateObj);var weeksToDisplay = 6;var schedHtml;var displayWeek = [];var myUrl = constructURL(startDates[0], endDates[0]);$.ajax({		url		: myUrl,		type	: 'GET',		success	: function(response) {			schedHtml = '<table class="outermosttab" cellpadding="5" border="1">'						+ '<tr>';			displayWeek[0] = weeklySchedToString(response);			schedHtml += displayWeek[0];			schedHtml += '</tr>';			myUrl = constructURL(startDate2, endDate2);			$.ajax({					url		: myUrl,					type	: 'GET',					success	: function(response) {						schedHtml += '<tr>';						displayWeek[1] = weeklySchedToString(response);						schedHtml += displayWeek[1];						schedHtml += '</tr>';						myUrl = constructURL(startDate3, endDate3);						$.ajax({							url		: myUrl,							type	: 'GET',							success	: function(response) {								schedHtml += '<tr>';								displayWeek[1] = weeklySchedToString(response);								schedHtml += displayWeek[1];								schedHtml += '</tr>'											+ '</table>';								$("#maintable").html(schedHtml);								document.close();							}						});					}			});		}});function weeklySchedToString(weekSched){	var schedString = '';	var i, j;	for (i = 0; i < 7; i++)	{		var dateStr = weekSched[i].scheduleDate;		var dateObj2 = new Date(Date.parse(dateStr.substr(5,2) + "/" + dateStr.substr(8,2) + "/" + dateStr.substr(0,4)));		var dayOfWeekStr = dayOfWeekString(dateObj2.getDay());		schedString += '<td>'				+ '<table class="datedaytab" cellpadding="5" border="1">'				+ '<tr>'				+ '<td class="dateonly">'				+ dateStr.substr(8,2)				+ '</td>'				+ '<td class="dayofweek">'				+ dayOfWeekStr				+ '</td>'				+ '</tr>'				+ '<tr>'				+ '<td class="doclist" colspan="2" align="center">'				+ '<table class="doclisttab">';						for (j = 0; j < 4; j++)		{			schedString += '<tr>'						+ '<td>'						+ weekSched[i].physicianInfoArray[j].lastName						+ '</td>'						+ '<td>'						+ weekSched[i].physicianInfoArray[j].shiftShortname						+ '</td>'						+ '</tr>';		}				schedString += '</table>'						+ '</td>'						+ '</tr>'						+ '</table>'						+ '</td>';		}	return(schedString);}function constructURL(startDate, endDate){	return ("http://localhost:8080/docsched/api/v1/dailyschedule?startdate="			+ startDate + "&enddate=" + endDate);}function populateStartEndDates(startDates, endDates, dateObj){	var i;	for (i = 0; i < 7; i++)	{		startDates[i] = dateObj.toISOString().substr(0, 10);		dateObj.setDate(dateObj.getDate() + 6);		endDates[i] = dateObj.toISOString().substr(0, 10);		dateObj.setDate(dateObj.getDate() + 1);	}}function dayOfWeekString(dayOfWeek){	var str;	switch (dayOfWeek) {		case 0:			str = "Sun";			break;		case 1:			str = "Mon";			break;		case 2:			str = "Tue";			break;		case 3:			str = "Wed";			break;		case 4:			str = "Thu";			break;		case 5:			str = "Fri";			break;		case 6:			str = "Sat";			break;	}	return(str);}